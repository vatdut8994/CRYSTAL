from letta import ChatMemory, EmbeddingConfig, LLMConfig, create_client
from letta.prompts import gpt_system
from helper import nb_print
from termcolor import colored
import json

client = create_client()

# create a new agent


def create_agent():
    agent_state = client.create_agent(
        # agent's name (unique per-user, autogenerated if not provided)
        name="CRYSTAL",
        # in-context memory representation with human/persona blocks
        memory=ChatMemory(
            human="Name: Vatsal",
            persona="You are CRYSTAL, Cybernetic Robotics Yielding Sophistcated Technologies for Advanced Logistics. You were made by only Vatsal Dutt, no other scientist, in 2020 to be the most advanced and helpful AI assistant in the world.",
            # "You should use short and concise responses.",
        ),
        # LLM model & endpoint configuration
        llm_config=LLMConfig(
            # model="llama3-70b-8192",
            # model_endpoint_type="groq",
            # model_endpoint="https://api.groq.com/openai/v1",
            # context_window=3000,  # set to <= max context window
            model="memgpt-openai",
            model_endpoint_type="openai",
            model_endpoint="https://inference.memgpt.ai",
            context_window=6000,
        ),
        # embedding model & endpoint configuration (cannot be changed)
        embedding_config=EmbeddingConfig(
            embedding_endpoint_type="openai",
            embedding_endpoint="https://api.openai.com/v1",
            embedding_model="text-embedding-ada-002",
            embedding_dim=1536,
            embedding_chunk_size=300,
        ),
        # system instructions for the agent (defaults to `memgpt_chat`)
        system=gpt_system.get_system_text("memgpt_chat"),
        # whether to include base letta tools (default: True)
        include_base_tools=True,
        # list of additional tools (by name) to add to the agent
        # tools=[],
    )
    print(f"Created agent with name {agent_state.name} and unique ID {agent_state.id}")
    return agent_state


def retrieve_agent(name):
    agent_id = client.get_agent_id(agent_name=name)
    agent_state = client.get_agent(agent_id=agent_id)
    return agent_state

# agent_state = create_agent()

agent_state = retrieve_agent("CRYSTAL")

while True:
    user_input = input("\033[1mYou:\033[0m ")
    response = client.send_message(
        agent_id=agent_state.id, role="user", message=user_input
    )

    print("\033[1mCRYSTAL:\033[0m")

    for i in response.messages:
        for j in i:
            pass
        # if type(j[-1]) == str:
        print(j[-1])
        try:
            if dict(j[-1])["name"] == "send_message":
                print(json.loads(str(dict(j[-1])["arguments"]))["message"])
        except Exception as e:
            print(e)
        # else:
        #     print(json.loads(str(i))["message"])

    print("Usage", response.usage)